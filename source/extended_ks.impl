

IMPLEMENT_OVERLOAD(SetPlayerPos, Vector3_16)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	player.pos.x = ReadUnalignedShort(params);
	player.pos.y = ReadUnalignedShort(params + 2);
	player.pos.z = ReadUnalignedShort(params + 4);
}


IMPLEMENT_OVERLOAD(MovePlayer, Vector3_16)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	player.pos.x += ReadUnalignedShort(params);
	player.pos.y += ReadUnalignedShort(params + 2);
	player.pos.z += ReadUnalignedShort(params + 4);
}


IMPLEMENT(SetPlayerAngleY<>)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	player.ang.y = ReadUnalignedShort(params);
}


IMPLEMENT(TurnPlayer<>)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	player.ang.y += ReadUnalignedShort(params);
}


IMPLEMENT(ExpDecayPlayerAngleY<>)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	const short targetAngle = ReadUnalignedShort(params);
	const int   invFactor   = ReadUnalignedInt(params + 2);
	const int   maxDelta    = ReadUnalignedInt(params + 6);
	const int   minDelta    = ReadUnalignedInt(params + 10);

	ApproachAngle(player.ang.y, targetAngle, invFactor, maxDelta, minDelta);
}


IMPLEMENT(HurtPlayer<>)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	Vector3 source;
	source.x = ReadUnalignedShort(params);
	source.y = ReadUnalignedShort(params + 2);
	source.z = ReadUnalignedShort(params + 4);

	const unsigned damage             =  ReadUnalignedInt(params + 6);
	const Fix12i speed                = {ReadUnalignedInt(params + 10), as_raw};
	const unsigned arg4               =  ReadUnalignedInt(params + 14);
	const unsigned presetHurt         =  ReadUnalignedInt(params + 18);
	const unsigned spawnOuchParticles =  ReadUnalignedInt(params + 22);

	player.Hurt(source, damage, speed, arg4, presetHurt, spawnOuchParticles);
}


IMPLEMENT(BurnPlayer<>)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	player.Burn();
}


IMPLEMENT(ShockPlayer<>)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	player.Shock(ReadUnalignedInt(params));
}


IMPLEMENT(BouncePlayer<>)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	player.Bounce({ReadUnalignedInt(params), as_raw});
}


IMPLEMENT(PlayLong<>)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	const unsigned soundArchiveID = ReadUnalignedInt(params);
	const unsigned soundID = ReadUnalignedInt(params + 4);

	player.playLongUniqueID = Sound::PlayLong(player.playLongUniqueID, soundArchiveID, soundID, player.camSpacePos, 0);
}


IMPLEMENT(PrintPlayerPos<>)
(Player& player, const char* params, short minFrame, short maxFrame)
{
	cout << player.pos;
}


static Fix12i IterateSmoothStep(Fix12i t, unsigned n)
{
	for (unsigned i = 0; i < n; i++)
		t = SmoothStep(t);

	return t;
}

static void CubicInterpVec(Vector3& res, const char* params, short minFrame, short maxFrame, Vector3& v0)
{
	const Fix12i t = Fix12i(KS_FRAME_COUNTER - minFrame, as_raw) / Fix12i(maxFrame - minFrame, as_raw);
	if(t == 0_f) v0 = res;

	Vector3 v1;
	v1.x = ReadUnalignedShort(params);
	v1.y = ReadUnalignedShort(params + 2);
	v1.z = ReadUnalignedShort(params + 4);

	const unsigned smoothness = params[6];

	AssureUnaliased(res) = Lerp(v0, v1, IterateSmoothStep(t, smoothness));
}


IMPLEMENT_OVERLOAD(LerpCamPos, Vector3_16, uint8_t)
(Camera& cam, const char* params, short minFrame, short maxFrame)
{
	static constinit Vector3 sourcePos;

	CubicInterpVec(cam.pos, params, minFrame, maxFrame, sourcePos);
}


IMPLEMENT_OVERLOAD(LerpCamTarget, Vector3_16, uint8_t)
(Camera& cam, const char* params, short minFrame, short maxFrame)
{
	static constinit Vector3 sourceLookAt;

	CubicInterpVec(cam.lookAt, params, minFrame, maxFrame, sourceLookAt);
}


IMPLEMENT(DisableAmbientSoundEffects)
(Camera& cam, const char* params, short minFrame, short maxFrame)
{
	AMBIENT_SOUND_EFFECTS_ENABLED = 1;
}


IMPLEMENT(PrintCamPos)
(Camera& cam, const char* params, short minFrame, short maxFrame)
{
	cout << cam.pos;
}

IMPLEMENT(PrintCamTarget)
(Camera& cam, const char* params, short minFrame, short maxFrame)
{
	cout << cam.lookAt;
}


IMPLEMENT(PrintFrameCounter)
(Camera& cam, const char* params, short minFrame, short maxFrame)
{
	cout << KS_FRAME_COUNTER;
}


IMPLEMENT(Print<1>)
(Camera& cam, const char* params, short minFrame, short maxFrame)
{
	cout << params;
}
